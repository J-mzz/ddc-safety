n = 2;
x = sdpvar(n, 1);
order = 6;
vars = x;
d = 2*order;

TWO_DISK = 1;

%set geometry
C0 = [1.5; 0];
R0 = 0.5;

Cu = [0; -1];
Ru = 0.6;


Cu2 = [1; 1];
Ru2 = 0.5;

%support sets
X0 = struct('ineq', R0^2 - sum((x - C0).^2), 'eq', []);
Xu = struct('ineq', Ru^2 - sum((x - Cu).^2), 'eq', []);
% X = struct('ineq', [], 'eq', []);
X = struct('ineq', [sum((x - Cu).^2) - (Ru)^2; sum((x - Cu).^2) - (Ru2)^2], 'eq', []);

utol = 0.01;
% var_reduce = x(1);
% red_term = x(1)^2 - (sum((x - Cu).^2) - (Ru)^2);
% red_term2 = x(1)^2 - (sum((x - Cu2).^2) - (Ru2)^2);

xu1 = ((Ru)^2 - sum((x - Cu).^2) - utol);
xu2 = ((Ru2)^2 - sum((x - Cu2).^2) - utol);

%polynomials

f = [x(2); -x(1) + (1/3)*x(1)^3 - x(2)];
g = [0; 1];
% Ulim = 10;
% Ulim = 5;
Ulim = 4;
Rlim = 100;

if TWO_DISK
    [h, ch, mh] = polynomial(x, d-4);
    rho = h*xu1;
else
    [h, ch, mh] = polynomial(x, d-2);
    rho = h*xu1*xu2;
end


[psi, cpsi, mpsi] = polynomial(x, d);

aff = rho*f + psi*g;
div = jacobian(aff(1), x(1)) + jacobian(aff(2), x(2));
 
%psatz constraints

%radial limiter
limiter = (Ulim+(x'*x)/Rlim);
% limiter = Ulim;

[p_div, cons_div, coeff_div] = constraint_psatz(div, X, vars, d);
[p_0, cons_0, coeff_0] = constraint_psatz(rho - 1e-2, X0, vars, d);
[p_top, cons_top, coeff_top] = constraint_psatz(limiter*rho - psi, X, vars, d);
[p_bot, cons_bot, coeff_bot] = constraint_psatz(limiter*rho + psi, X, vars, d);
% 
% cons_u = [coeff_u==0];
% 
% if TWO_DISK
%     cons_u = [cons_u; coeff_u2==0];
% end

coeff = [coeff_div; coeff_0; coeff_top; coeff_bot; ch; cpsi];
cons = [cons_div; cons_0; cons_top; cons_bot];
opts = sdpsettings('solver', 'mosek');
sol = solvesos(cons, 0, opts, coeff);


if sol.problem== 0
%% recovery
[crho, mrho] = coefficients(rho, vars);
rho_rec = value(crho)'*mrho;
psi_rec = value(cpsi)'*mpsi;
h_rec = value(ch)'*mh;

rhof = polyval_func(rho_rec, vars);
psif = polyval_func(psi_rec, vars);

boxlim = 1000;
ode_opts = odeset('RelTol', 1e-7, 'Events', @(t, x) box_event(t, x, boxlim));


uf = @(x) psif(x)./rhof(x);
Ff = polyval_func(f, vars);
Gf = polyval_func(g, vars);

Fclosed = @(x) Ff(x) + uf(x).*Gf(x);


%% sampling 

Nsample = 100;
sampler = @() ball_sample(1, 2)'*R0 + C0;
traj = cell(Nsample, 1);
Tmax = 10;
for i = 1:Nsample
    x0_curr = sampler();
    traj{i} = ode23(@(t, x) Fclosed(x), [0, Tmax], x0_curr, ode_opts);
    traj{i}.u = uf(traj{i}.y);
end

%% plotting (nonrobust/ddc)

colors=linspecer(3);
blp = 3;

figure(12)
clf
theta = linspace(0, 2*pi, 150);
hold on
plot(C0(1) + R0*cos(theta), C0(2) + R0*sin(theta), 'k', 'LineWidth', 2)
plot(Cu(1) + Ru*cos(theta), Cu(2) + Ru*sin(theta), 'color', colors(2, :), 'LineWidth', 2)
plot(Cu2(1) + Ru2*cos(theta), Cu2(2) + Ru2*sin(theta), 'color', colors(2, :), 'LineWidth', 2)
% fimplicit(@(x1, x2) rhof([x1; x2]), [-1,1,-1,1]*blp, 'color', colors(1, :))
%fsurf(@(x1, x2) rhof([x1; x2]), [-1,1,-1,1]*blp)
xlabel('$x_1$', 'interpreter', 'latex')
xlabel('$x_2$', 'interpreter', 'latex')
title('Density Generated by Equality Constraint', 'fontsize', 14)

for i = 1:Nsample
    plot(traj{i}.y(1, :), traj{i}.y(2, :), 'color', colors(3, :))
end


xlim(blp*[-1,1])
ylim(blp*[-1,1])
axis square

figure(14)
clf
hold on
for i = 1:Nsample
    plot(traj{i}.x, traj{i}.u, 'color', colors(1, :))
end
xl = xlim;
plot(xl, Ulim*[1, 1], 'color', 'k', 'LineWidth', 2)
plot(xl, -Ulim*[1, 1], 'color', 'k', 'LineWidth', 2)
plot(xl, 0*[1, 1], ':k', 'LineWidth', 2)

xlabel('$t$', 'interpreter', 'latex')
ylabel('$u(t)$', 'interpreter', 'latex')
title('Bounded Input Actuation', 'fontsize', 14)


end




